// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`login component should render correctly 1`] = `
<Login
  realms={
    Array [
      "HBP",
    ]
  }
>
  <div
    className="Login"
  >
    <Card
      bodyStyle={
        Object {
          "borderTop": "1px solid rgba(0, 0, 0, 0.10)",
        }
      }
      cover={
        <img
          alt="Nexus logo"
          className="logo"
          src="/mock/path"
        />
      }
      size="small"
    >
      <div
        className="ant-card ant-card-bordered ant-card-small"
      >
        <div
          className="ant-card-cover"
        >
          <img
            alt="Nexus logo"
            className="logo"
            src="/mock/path"
          />
        </div>
        <div
          className="ant-card-body"
          style={
            Object {
              "borderTop": "1px solid rgba(0, 0, 0, 0.10)",
            }
          }
        >
          <Button
            block={true}
            className="login-button"
            ghost={false}
            htmlType="button"
            loading={false}
            onClick={[Function]}
            type="primary"
          >
            <Wave>
              <button
                className="ant-btn ant-btn-primary ant-btn-block login-button"
                onClick={[Function]}
                type="button"
              >
                <LoadingIcon
                  existIcon={false}
                  loading={false}
                  prefixCls="ant-btn"
                >
                  <CSSMotion
                    motionName="ant-btn-loading-icon-motion"
                    onAppearActive={[Function]}
                    onAppearStart={[Function]}
                    onEnterActive={[Function]}
                    onEnterStart={[Function]}
                    onLeaveActive={[Function]}
                    onLeaveStart={[Function]}
                    removeOnLeave={true}
                    visible={false}
                  >
                    <DomWrapper />
                  </CSSMotion>
                </LoadingIcon>
                <span
                  key=".0"
                >
                  Log in
                </span>
                <AntdIcon
                  key=".1"
                  type="login"
                >
                  <span
                    className="anticon"
                    role="img"
                    type="login"
                  />
                </AntdIcon>
              </button>
            </Wave>
          </Button>
        </div>
      </div>
    </Card>
  </div>
</Login>
`;

exports[`login component with more than 1 realm should render correctly 1`] = `
<Login
  realms={
    Array [
      "BBP",
      "HBP",
      "Google",
    ]
  }
>
  <div
    className="Login"
  >
    <Card
      bodyStyle={
        Object {
          "borderTop": "1px solid rgba(0, 0, 0, 0.10)",
        }
      }
      cover={
        <img
          alt="Nexus logo"
          className="logo"
          src="/mock/path"
        />
      }
      size="small"
    >
      <div
        className="ant-card ant-card-bordered ant-card-small"
      >
        <div
          className="ant-card-cover"
        >
          <img
            alt="Nexus logo"
            className="logo"
            src="/mock/path"
          />
        </div>
        <div
          className="ant-card-body"
          style={
            Object {
              "borderTop": "1px solid rgba(0, 0, 0, 0.10)",
            }
          }
        >
          <div
            className="actions"
          >
            <Button
              block={false}
              className="login-button"
              ghost={false}
              htmlType="button"
              loading={false}
              onClick={[Function]}
              type="primary"
            >
              <Wave>
                <button
                  className="ant-btn ant-btn-primary login-button"
                  onClick={[Function]}
                  type="button"
                >
                  <LoadingIcon
                    existIcon={false}
                    loading={false}
                    prefixCls="ant-btn"
                  >
                    <CSSMotion
                      motionName="ant-btn-loading-icon-motion"
                      onAppearActive={[Function]}
                      onAppearStart={[Function]}
                      onEnterActive={[Function]}
                      onEnterStart={[Function]}
                      onLeaveActive={[Function]}
                      onLeaveStart={[Function]}
                      removeOnLeave={true}
                      visible={false}
                    >
                      <DomWrapper />
                    </CSSMotion>
                  </LoadingIcon>
                  <span
                    key=".0"
                  >
                    Log in
                  </span>
                  <AntdIcon
                    key=".1"
                    type="login"
                  >
                    <span
                      className="anticon"
                      role="img"
                      type="login"
                    />
                  </AntdIcon>
                </button>
              </Wave>
            </Button>
            <div
              className="realm-holder"
            >
              <span>
                 with 
              </span>
              <Dropdown
                mouseEnterDelay={0.15}
                mouseLeaveDelay={0.1}
                overlay={
                  <Menu
                    onClick={[Function]}
                  >
                    <MenuItem>
                      BBP
                    </MenuItem>
                    <MenuItem>
                      HBP
                    </MenuItem>
                    <MenuItem>
                      Google
                    </MenuItem>
                  </Menu>
                }
                trigger={
                  Array [
                    "click",
                    "hover",
                  ]
                }
              >
                <ForwardRef(Dropdown)
                  mouseEnterDelay={0.15}
                  mouseLeaveDelay={0.1}
                  overlay={[Function]}
                  overlayClassName=""
                  placement="bottomLeft"
                  prefixCls="ant-dropdown"
                  transitionName="slide-up"
                  trigger={
                    Array [
                      "click",
                      "hover",
                    ]
                  }
                >
                  <Trigger
                    action={
                      Array [
                        "click",
                        "hover",
                      ]
                    }
                    afterPopupVisibleChange={[Function]}
                    autoDestroy={false}
                    blurDelay={0.15}
                    builtinPlacements={
                      Object {
                        "bottomCenter": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tc",
                            "bc",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "bottomLeft": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tl",
                            "bl",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "bottomRight": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tr",
                            "br",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topCenter": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "bc",
                            "tc",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topLeft": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "bl",
                            "tl",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topRight": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "br",
                            "tr",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                      }
                    }
                    defaultPopupVisible={false}
                    destroyPopupOnHide={false}
                    focusDelay={0}
                    getDocument={[Function]}
                    getPopupClassNameFromAlign={[Function]}
                    hideAction={Array []}
                    mask={false}
                    maskClosable={true}
                    mouseEnterDelay={0.15}
                    mouseLeaveDelay={0.1}
                    onPopupAlign={[Function]}
                    onPopupVisibleChange={[Function]}
                    overlay={[Function]}
                    popup={[Function]}
                    popupAlign={Object {}}
                    popupClassName=""
                    popupPlacement="bottomLeft"
                    popupStyle={Object {}}
                    popupTransitionName="slide-up"
                    prefixCls="ant-dropdown"
                    showAction={Array []}
                    stretch="minWidth"
                  >
                    <span
                      className="ant-dropdown-trigger realm"
                      key="trigger"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onTouchStart={[Function]}
                    >
                      HBP
                       
                      <AntdIcon
                        type="down"
                      >
                        <span
                          className="anticon"
                          role="img"
                          type="down"
                        />
                      </AntdIcon>
                    </span>
                  </Trigger>
                </ForwardRef(Dropdown)>
              </Dropdown>
            </div>
          </div>
        </div>
      </div>
    </Card>
  </div>
</Login>
`;
